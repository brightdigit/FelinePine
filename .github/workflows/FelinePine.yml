name: FelinePine
on:
  push:
    branches-ignore:
      - '*WIP'

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    env:
      PACKAGE_NAME: FelinePine
      SWIFT_VER: ${{ matrix.swift-version }}
    runs-on: ${{ matrix.runs-on }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        runs-on: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        swift-version: [5.8.1, 5.9, "5.10.1", "6.0.1"]
        exclude:
          - runs-on: ubuntu-24.04
            swift-version: 5.9            
          - runs-on: ubuntu-24.04
            swift-version: 5.8.1
    steps:
      - uses: actions/checkout@v4
      - name: Cache swift package modules
        id: cache-spm-linux
        uses: actions/cache@v4
        env:
          cache-name: SPM
        with:
          path: .build
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ env.SWIFT_VER }}-${{ hashFiles('Package.resolved') }}-${{ env.RELEASE_DOT }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-${{ env.SWIFT_VER }}-${{ hashFiles('Package.resolved') }}
            ${{ env.cache-name }}-${{ runner.os }}-${{ env.SWIFT_VER }}
      - name: Set Ubuntu Release DOT
        run: echo "RELEASE_DOT=$(lsb_release -sr)" >> $GITHUB_ENV
      - name: Set Ubuntu Release NUM
        run: echo "RELEASE_NUM=${RELEASE_DOT//[-._]/}"  >> $GITHUB_ENV
      - name: Set Ubuntu Codename
        run: echo "RELEASE_NAME=$(lsb_release -sc)"  >> $GITHUB_ENV
      - name: Cache swift
        id: cache-swift-linux
        uses: actions/cache@v4
        env:
          cache-name: swift
        with:
          path: swift-${{ env.SWIFT_VER }}-RELEASE-ubuntu${{ env.RELEASE_DOT }}
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ env.SWIFT_VER }}-${{ env.RELEASE_DOT }}
      - name: Download Swift
        if: steps.cache-swift-linux.outputs.cache-hit != 'true'
        run: curl -O https://download.swift.org/swift-${SWIFT_VER}-release/ubuntu${RELEASE_NUM}/swift-${SWIFT_VER}-RELEASE/swift-${SWIFT_VER}-RELEASE-ubuntu${RELEASE_DOT}.tar.gz
      - name: Extract Swift
        if: steps.cache-swift-linux.outputs.cache-hit != 'true'
        run: tar xzf swift-${SWIFT_VER}-RELEASE-ubuntu${RELEASE_DOT}.tar.gz
      - name: Add Path
        run: echo "$GITHUB_WORKSPACE/swift-${SWIFT_VER}-RELEASE-ubuntu${RELEASE_DOT}/usr/bin" >> $GITHUB_PATH
      - name: Build
        run: swift build
      - name: Run tests
        run: swift test --enable-test-discovery --enable-code-coverage
      - name: Prepare Code Coverage
        run: llvm-cov export -format="lcov" .build/x86_64-unknown-linux-gnu/debug/${{ env.PACKAGE_NAME }}PackageTests.xctest -instr-profile .build/debug/codecov/default.profdata > info.lcov
      - name: Upload to CodeCov.io
        run: bash <(curl https://codecov.io/bash) -F spm -F ${RELEASE_NAME} -F ${SWIFT_VER}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  build-macos:
    name: Build on macOS
    env:
      PACKAGE_NAME: FelinePine
    runs-on: ${{ matrix.runs-on }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        include:
          - runs-on: macos-13
            xcode: "/Applications/Xcode_15.0.1.app"
            iOSVersion: "17.0.1"
            watchOSVersion: "10.0"
            watchName: "Apple Watch Series 8 (41mm)"
            iPhoneName: "iPhone 15"
          - runs-on: macos-14
            xcode: "/Applications/Xcode_15.1.app"
            iOSVersion: "17.2"
            watchOSVersion: "10.2"
            watchName: "Apple Watch Series 9 (41mm)"
            iPhoneName: "iPhone 15 Plus"
          - runs-on: macos-14
            xcode: "/Applications/Xcode_15.2.app"
            iOSVersion: "17.2"
            watchOSVersion: "10.2"
            watchName: "Apple Watch Series 9 (45mm)"
            iPhoneName: "iPhone 15 Pro"
          - runs-on: macos-15
            xcode: "/Applications/Xcode_16.1.app"
            iOSVersion: "18.1"
            watchOSVersion: "11.1"
            watchName: "Apple Watch Series 10 (46mm)"
            iPhoneName: "iPhone 16 Pro"
    steps:
      - uses: actions/checkout@v4
      - name: Cache swift package modules
        id: cache-spm-macos
        uses: actions/cache@v4
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Cache mint
        if: ${{ github.event_name == 'pull_request' && ( github.base_ref == 'main' || endsWith( github.ref_name , 'Prep') ) && matrix.xcode == '/Applications/Xcode_16.1.app' }}
        id: cache-mint
        uses: actions/cache@v4
        env:
          cache-name: cache-mint
        with:
          path: .mint
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Set Xcode Name
        run: echo "XCODE_NAME=$(basename -- ${{ matrix.xcode }} | sed 's/\.[^.]*$//' | cut -d'_' -f2)" >> $GITHUB_ENV
      - name: Setup Xcode
        run: sudo xcode-select -s ${{ matrix.xcode }}/Contents/Developer
      - name: Install mint
        if: ${{ github.event_name == 'pull_request' && ( github.base_ref == 'main' || endsWith( github.ref_name , 'Prep') ) && matrix.xcode == '/Applications/Xcode_16.1.app' }}
        run: |
          brew update
          brew install mint
      - name: Build
        run: swift build
      - name: Run Swift Package tests
        run: swift test -v --enable-code-coverage
      - uses: sersoft-gmbh/swift-coverage-action@v4
      - name: Upload SPM to CodeCov.io
        run: bash <(curl https://codecov.io/bash) -F spm -F macOS -F ${XCODE_NAME}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Clean up spm build directory
        run: rm -rf .build
      - name: Lint
        run: ./scripts/lint.sh
        if: ${{ github.event_name == 'pull_request' && ( github.base_ref == 'main' || endsWith( github.ref_name , 'Prep') ) && matrix.xcode == '/Applications/Xcode_16.1.app' }}
      - name: Run iOS target tests
        run: xcodebuild test -scheme FelinePine -sdk iphonesimulator -destination 'platform=iOS Simulator,name=${{ matrix.iPhoneName }},OS=${{ matrix.iOSVersion }}' -enableCodeCoverage YES build test
      - uses: sersoft-gmbh/swift-coverage-action@v4
      - name: Upload iOS Coverage to CodeCov.io
        run: bash <(curl https://codecov.io/bash) -F iOS -F iOS${{ matrix.iOSVersion }} -F macOS -F ${XCODE_NAME}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}      
      - name: Run watchOS target tests
        run: xcodebuild test -scheme FelinePine -sdk watchsimulator -destination 'platform=watchOS Simulator,name=${{ matrix.watchName }},OS=${{ matrix.watchOSVersion }}' -enableCodeCoverage YES build test
      - uses: sersoft-gmbh/swift-coverage-action@v4
      - name: Upload watchOS Coverage to CodeCov.io
        run: bash <(curl https://codecov.io/bash) -F watchOS -F watchOS${{ matrix.watchOSVersion }} -F macOS -F ${XCODE_NAME}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}          
          token: ${{ secrets.CODECOV_TOKEN }}
